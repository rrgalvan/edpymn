load "iovtk"

real R = 1;
real alfa = pi/10;
real x1 = R*cos(-alfa), y1 = R*sin(-alfa);
real x2 = R*cos(+alfa), y2 = R*sin(+alfa);
real L=5*R;
real x3 = x1 + L, y3 = y1;
real x4 = x2 + L, y4 = y2;

border gamma0(t=+alfa,2*pi-alfa) { x = R*cos(t); y = R*sin(t); }
border gamma1(t=x1,x3) { x = t; y = y1; }
border gamma2(t=y1,y2) { x = x3; y = t; }
border gamma3(t=x4,x2) { x = t; y = y2; }

int nPuntos = 40;
int doPlot = true;
if(doPlot) {
  plot( gamma0(nPuntos) + gamma1(nPuntos)
        + gamma2(nPuntos) + gamma3(nPuntos) );
 }

mesh Th = buildmesh(gamma0(nPuntos) + gamma1(nPuntos)
                    + gamma2(nPuntos/5) + gamma3(nPuntos) );
 // savevtk("/tmp/m.vtk", Th);
if(doPlot) {
  plot(Th);
 }

// Espacio de elementos finitos
fespace Vh(Th, P2);

// u -> u^m
// u0 -> u^{m-1}
Vh u, ub; // Incógnita u, f. test "u barra"
Vh u0; // Solución en la etapa de tiempo anterior

// Datos
real b1=100, b2=0; // Vector de transporte [b1, b2]
real C0 = 1, C1 = 30;
real nu = 1; // Coeficiente de difusión
real dt = 0.01; // Paso en tiempo
int nIter = 100; // Nº iteraciones en tiempo
real Tmax = dt*nIter;
real t; // Tiempo actual

// Fuerza externa, f
func real f(real x, real y, real t) {
  return C0*exp(-C1*(x^2 + y^2)) * t/Tmax;
}

u0 = 0; // Condición inicial

// Grabr a un fichero la condición inicial
int[int] Order = [1]; // Grado de polinomios en vtk
savevtk("calor-0.vtk", Th, u, dataname="u", order=Order);

// Formulación variacional
macro grad(u) [dx(u), dy(u)] // EOM
// macro div(u1, u2) (dx(u1)+dy(u2)) // EOM

problem CalorEulerImplic(u, ub) =
  // Forma bilineal
  int2d(Th)(u*ub +  // Derivada en tiempo
            dt*nu*grad(u)'*grad(ub) +  // Difusión
            dt*b1*dx(u)*ub + dt*b2*dy(u)*ub  // Convección
            )
  // Forma lineal
  - int2d(Th)(u0*ub + dt*f(x,y,t)*ub)
  // Condición Neumann
  // - int1d(Th, gamma0, gamma1, gamma2, gamma3)(g*ub)  // No está si g=0
  // Condición Dirichlet homogénea
  // + on(gamma0, gamma1, gamma2, gamma3, u=0)
  ;

problem CalorEulerExplic(u, ub) = // CUIDADO, CONDICIONALMENTE ESTABLE!!!
  // Forma bilineal
  int2d(Th)(u*ub)
  // Forma lineal
  - int2d(Th)(dt*nu*grad(u0)'*grad(ub) + u0*ub + dt*f(x,y,t)*ub)
  // Condición Dirichlet homogénea
  // + on(gamma0, gamma1, gamma2, gamma3, u=0)
  ;

// Bucle en tiempo (Euler Implícito)
for(int m=1; m<=nIter; m++) {
  t = dt*m;  // Instante de tiempo en la etapa m
  cout << "Iteraci'on de tiempo " << m << " (t=" << t << ")" << endl;

  CalorEulerImplic; // Resolver el problema llamado "Calor" (devuelve u)
  if(doPlot) {
    plot(u, fill=1, value=1, cmm = "sol t=" + t, wait=1);
  }

  // Preparamos la siguiente etapa
  u0 = u;

  savevtk("calor-" + m + ".vtk", Th, u, dataname="u", order=Order);
 }
